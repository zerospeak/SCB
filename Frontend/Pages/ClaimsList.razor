@page "/claims"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Claims List</PageTitle>

<h3 class="mb-4">Claims</h3>

<div class="mb-3 text-end">
    <button class="btn btn-primary" @onclick="CreateClaim">
        <i class="bi bi-plus-lg me-1"></i>New Claim
    </button>
</div>

@if (claims == null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 30vh;"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>
}
else if (!claims.Any())
{
    <div class="alert alert-info">No claims found.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>Claim #</th>
                    <th>Policy Holder</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th class="text-end">Amount</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var claim in claims)
                {
                    <tr>
                        <td>@claim.ClaimNumber</td>
                        <td>@claim.PolicyHolder</td>
                        <td>@claim.Date.ToShortDateString()</td>
                        <td>@claim.Status</td>
                        <td class="text-end">@claim.Amount.ToString("C")</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-outline-primary me-1" title="View" @onclick="() => ViewClaim(claim.Id)"><i class="bi bi-eye"></i></button>
                            <button class="btn btn-sm btn-outline-info me-1" title="Edit" @onclick="() => EditClaim(claim.Id)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick="() => ConfirmDelete(claim.Id)"><i class="bi bi-trash"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Claim</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this claim?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteClaimConfirmed">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<ClaimDto>? claims;
    private bool showDeleteModal = false;
    private int deleteClaimId;

    protected override async Task OnInitializedAsync()
    {
        await LoadClaims();
    }

    private async Task LoadClaims()
    {
        claims = await Http.GetFromJsonAsync<List<ClaimDto>>(ApiUrl("/api/claims"));
    }

    private void CreateClaim()
    {
        Navigation.NavigateTo("/claims/new");
    }

    private void ViewClaim(int id)
    {
        Navigation.NavigateTo($"/claims/{id}");
    }

    private void EditClaim(int id)
    {
        Navigation.NavigateTo($"/claims/edit/{id}");
    }

    private void ConfirmDelete(int id)
    {
        deleteClaimId = id;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task DeleteClaimConfirmed()
    {
        await Http.DeleteAsync(ApiUrl($"/api/claims/{deleteClaimId}"));
        showDeleteModal = false;
        await LoadClaims();
    }

    private string ApiUrl(string path)
    {
#if DEBUG
        // Use localhost for local dev
        return $"http://localhost:5000{path}";
#else
        // Use webapi for Docker
        return $"http://webapi{path}";
#endif
    }

    public class ClaimDto
    {
        public int Id { get; set; }
        public string? ClaimNumber { get; set; }
        public string? PolicyHolder { get; set; }
        public DateTime Date { get; set; }
        public string? Status { get; set; }
        public decimal Amount { get; set; }
    }
}
