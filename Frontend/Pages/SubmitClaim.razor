@page "/submit-claim"
@inject HttpClient Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

<h3>Submit Insurance Claim</h3>

<EditForm Model="claim" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Provider ID:</label>
        <InputText @bind="claim.ProviderID" />
    </div>
    <div>
        <label>Member SSN:</label>
        <InputText @bind="claim.MemberSSN" />
    </div>
    <div>
        <label>Paid Amount:</label>
        <InputNumber @bind="claim.PaidAmount" TValue="decimal" />
    </div>
    <button type="submit">Submit</button>
</EditForm>

@if (riskScore is not null)
{
    <p><b>Risk Score:</b> @riskScore</p>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@code {
    private ClaimModel claim = new();
    private double? riskScore;
    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        riskScore = null;
        try
        {
            var http = Http;
            var apiUrl = await GetApiUrl("/api/claims");
            var response = await http.PostAsJsonAsync(apiUrl, claim);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RiskResult>();
                riskScore = result?.risk;
            }
            else
            {
                errorMessage = $"API error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task<string> GetApiUrl(string path)
    {
        string? hostname = null;
        if (JS != null)
        {
            try { hostname = await JS.InvokeAsync<string>("eval", "window.location.hostname"); } catch {}
        }
        if (hostname == "localhost" || hostname == "127.0.0.1")
            return $"http://localhost:5000{path}";
        return $"http://webapi{path}";
    }

    [Inject] IJSRuntime? JS { get; set; }

    [Inject] NavigationManager? NavigationManager { get; set; }

    public class ClaimModel
    {
        public string? ProviderID { get; set; }
        public string? MemberSSN { get; set; }
        public decimal PaidAmount { get; set; }
        public bool? IsFraud { get; set; } = null;
    }
    public class RiskResult { public double risk { get; set; } }
}
